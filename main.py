import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
from datetime import datetime, timedelta
import re

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!)
BOT_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTING_DATE, SETTING_FREQUENCY = range(2)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store = {}


class CountdownBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                SETTING_DATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_date)
                ],
                SETTING_FREQUENCY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_frequency)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )

        self.application.add_handler(conv_handler)
        self.application.add_handler(CommandHandler("status", self.show_status))
        self.application.add_handler(CommandHandler("stop", self.stop_reminders))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        await update.message.reply_text(
            "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç!\n\n"
            "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –≤–µ—Å—Ç–∏ –æ—Ç—Å—á—ë—Ç.\n"
            "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ 31.12.2024\n"
            "‚Ä¢ 2024-12-31\n"
            "‚Ä¢ '—á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π'\n"
            "‚Ä¢ '—á–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞'\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ /cancel"
        )

        return SETTING_DATE

    def parse_date(self, date_text: str):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è dateutil"""
        date_text = date_text.strip()

        # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞
        if date_text.lower().startswith('—á–µ—Ä–µ–∑'):
            return self.parse_relative_date(date_text)

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        formats = [
            '%d.%m.%Y',  # 31.12.2024
            '%Y-%m-%d',  # 2024-12-31
            '%d/%m/%Y',  # 31/12/2024
            '%d %m %Y',  # 31 12 2024
        ]

        for fmt in formats:
            try:
                return datetime.strptime(date_text, fmt)
            except ValueError:
                continue

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª
        raise ValueError("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

    def parse_relative_date(self, text: str) -> datetime:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Ç–∏–ø–∞ '—á–µ—Ä–µ–∑ X –¥–Ω–µ–π/–º–µ—Å—è—Ü–µ–≤'"""
        text = text.lower()
        today = datetime.now()

        if '–¥–µ–Ω—å' in text or '–¥–Ω—è' in text or '–¥–Ω–µ–π' in text:
            numbers = re.findall(r'\d+', text)
            if numbers:
                days = int(numbers[0])
                return today + timedelta(days=days)

        elif '–Ω–µ–¥–µ–ª' in text:
            numbers = re.findall(r'\d+', text)
            if numbers:
                weeks = int(numbers[0])
                return today + timedelta(weeks=weeks)

        elif '–º–µ—Å—è—Ü' in text or '–º–µ—Å—è—Ü–∞' in text or '–º–µ—Å—è—Ü–µ–≤' in text:
            numbers = re.findall(r'\d+', text)
            if numbers:
                months = int(numbers[0])
                # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤
                new_month = today.month + months
                year = today.year + (new_month - 1) // 12
                month = (new_month - 1) % 12 + 1
                day = today.day
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                try:
                    return datetime(year, month, day)
                except ValueError:
                    # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è), –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                    next_month = datetime(year, month, 28) + timedelta(days=4)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                    return next_month - timedelta(days=next_month.day)

        raise ValueError("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

    async def set_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        user_id = update.effective_user.id
        date_text = update.message.text

        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            target_date = self.parse_date(date_text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
            if target_date <= datetime.now():
                await update.message.reply_text(
                    "‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:"
                )
                return SETTING_DATE

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
            if user_id not in user_data_store:
                user_data_store[user_id] = {}

            user_data_store[user_id]['target_date'] = target_date

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã
            keyboard = [
                ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"],
                ["–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü", "–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

            await update.message.reply_text(
                f"‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target_date.strftime('%d.%m.%Y')}\n\n"
                "üìä –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
                reply_markup=reply_markup
            )

            return SETTING_FREQUENCY

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –û—à–∏–±–∫–∞: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! –ü—Ä–∏–º–µ—Ä—ã: '31.12.2024', '—á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π'"
            )
            return SETTING_DATE

    async def set_frequency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã"""
        user_id = update.effective_user.id
        frequency = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
        valid_frequencies = ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é", "–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü", "–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"]
        if frequency not in valid_frequencies:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=ReplyKeyboardMarkup([
                    ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"],
                    ["–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü", "–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"]
                ], one_time_keyboard=True)
            )
            return SETTING_FREQUENCY

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–æ—Ç—É
        user_data_store[user_id]['frequency'] = frequency

        await update.message.reply_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! üéâ\n\n"
            f"üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {user_data_store[user_id]['target_date'].strftime('%d.%m.%Y')}\n"
            f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {frequency}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "/start - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É",
            reply_markup=ReplyKeyboardRemove()
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await self.schedule_reminders(user_id, context)

        return ConversationHandler.END

    async def schedule_reminders(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        user_data = user_data_store.get(user_id)
        if not user_data:
            return

        target_date = user_data['target_date']
        frequency = user_data['frequency']

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
        if 'job' in user_data:
            user_data['job'].schedule_removal()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–æ—Ç—ã
        if frequency == "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å":
            job = context.job_queue.run_repeating(
                self.send_reminder,
                interval=86400,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                first=10,  # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                user_id=user_id
            )
        elif frequency == "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é":
            job = context.job_queue.run_repeating(
                self.send_reminder,
                interval=604800,  # 7 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                first=10,
                user_id=user_id
            )
        elif frequency == "–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü":
            job = context.job_queue.run_repeating(
                self.send_reminder,
                interval=2592000,  # ~30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                first=10,
                user_id=user_id
            )
        else:  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            time_until = (target_date - datetime.now()).total_seconds()
            if time_until > 0:
                job = context.job_queue.run_once(
                    self.send_reminder,
                    when=time_until,
                    user_id=user_id
                )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞!"
                )
                return

        user_data['job'] = job
        user_data_store[user_id] = user_data

    async def send_reminder(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        job = context.job
        user_id = job.user_id
        user_data = user_data_store.get(user_id)

        if user_data and 'target_date' in user_data:
            target_date = user_data['target_date']
            now = datetime.now()

            if now < target_date:
                days_left = (target_date - now).days

                message = (
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                    f"üìÖ –î–æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã ({target_date.strftime('%d.%m.%Y')}) "
                    f"–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π!\n"
                    f"üéØ –≠—Ç–æ {target_date.strftime('%d %B %Y')}"
                )
            else:
                message = (
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–∞!\n"
                    f"üìÖ {target_date.strftime('%d.%m.%Y')} - —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∞—Å—Ç–∞–ª!"
                )
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if 'job' in user_data:
                    user_data['job'].schedule_removal()
                user_data_store[user_id] = user_data

            await context.bot.send_message(chat_id=user_id, text=message)

    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        user_id = update.effective_user.id
        user_data = user_data_store.get(user_id)

        if not user_data or 'target_date' not in user_data:
            await update.message.reply_text(
                "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å—á—ë—Ç–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
            )
            return

        target_date = user_data['target_date']
        frequency = user_data.get('frequency', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        now = datetime.now()

        if now < target_date:
            days_left = (target_date - now).days
            status_text = (
                f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n"
                f"üéØ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {frequency}\n"
                f"üìÖ –°–µ–≥–æ–¥–Ω—è: {now.strftime('%d.%m.%Y')}"
            )
        else:
            status_text = (
                f"üéâ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!\n"
                f"üìÖ {target_date.strftime('%d.%m.%Y')} - —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∞—Å—Ç–∞–ª!"
            )

        await update.message.reply_text(status_text)

    async def stop_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        user_id = update.effective_user.id

        if user_id in user_data_store:
            if 'job' in user_data_store[user_id]:
                user_data_store[user_id]['job'].schedule_removal()
            del user_data_store[user_id]

            await update.message.reply_text(
                "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
            )
        else:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        self.application.run_polling()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    BOT_TOKEN = "8385192761:AAHYEylTefdFqSS8nkNFIAmISUoSlJqE4S4"

    if BOT_TOKEN == "–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨":
        print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏ '–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    else:
        bot = CountdownBot()
        bot.run_bot()  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!